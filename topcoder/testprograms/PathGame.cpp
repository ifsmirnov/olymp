#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <cassert>
using namespace std;
#define forn(i, n) for (int i = 0; i < (int)(n); ++i)
#define fore(i, b, e) for (int i = (int)(b); i <= (int)(e); ++i)
#define ford(i, n) for (int i = (int)(n) - 1; i >= 0; --i)
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define all(x) (x).begin(), (x).end()
typedef vector<int> vi;
typedef pair<int, int> pii;
typedef long long i64;
typedef unsigned long long u64;
const int inf = 1e9+100500;
const int maxn = 1010;

int n;
int a[2][maxn];
int b[2][maxn];

int d[maxn][3][3];

int mbuf[maxn * 10];

int mex(const vi& a) {
    assert(!a.empty());
    int x = *max_element(all(a));
    forn(i, x+2) mbuf[i] = 0;
    forn(i, a.size()) {
        mbuf[a[i]] = 1;
    }
    for (int i = 0;; ++i) {
        if (mbuf[i] == 0) {
            return i;
        }
    }
}

int go(int, int, int);

int go1(int l1, int r1, int l2, int r2) {
//     cout << "go1 " << l1 << " " << r1 << " " << l2 << " " << r2 << endl;
//     if (r1 < l1 && r2 < l2) { cout << "0" << endl; return 0; }
//     if (r1 < l1 && r2-l2 == 1) { cout << "2" << endl; return 2; }
//     if (r2 < l2 && r1-l1 == 1) { cout << "2" << endl; return 2; }
//     if (r1 < l1 || r2 < l2) { cout << "1" << endl; return 1; }
//     if (r1 < l2 || r2 < l1) { cout << "1" << endl; return 1; }
    if (r1 < l1 && r2 < l2) { return 0; }
    if (r1 < l1 && r2-l2 == 1) {  return 2; }
    if (r2 < l2 && r1-l1 == 1) { return 2; }
    if (r1 < l1 || r2 < l2) { return 1; }
    if (r1 < l2 || r2 < l1) { return 1; }
    return go(r1-l1+1, l2-l1, r2-r1);
}

int go(int n, int d1, int d2) {
    if (n <= 0) return 0;
    if (d1 < 0) return go(n-d1+d2, -d1, -d2);
    int &res = d[n][d1+1][d2+1];
    if (res == -1) {
        // [0 .. n-1]
        // [d1 .. n-1+d2]
        int l1 = 0, r1 = n-1;
        int l2 = d1, r2 = n-1+d2;
        if (r2 < l2) {
            return res = 1;
        }
        vi mm;
        fore(x, l1, r1) {
            int r = 0;
            r ^= go1(l1, x-1, l2, x-2);
            r ^= go1(x+1, r1, x+2, r2);
            mm.pb(r);
        }
        fore(x, l2, r2) {
            int r = 0;
            r ^= go1(l1, x-2, l2, x-1);
            r ^= go1(x+2, r1, x+1, r2);
            mm.pb(r);
        }
        res = mex(mm);
    }
    return res;
}

void out() {
    forn(i, 2) {
        forn(j, n) {
            cout << b[i][j];
        }
        cout << endl;
    }
}

void fill_bad() {
    forn(j, 2) forn(i, n) if (!a[j][i]) {
        bool ok = true;
        fore(k, i-1, i+1) if (k<n && k>=0) {
            if (a[!j][k]) {
                ok = false;
            }
        }
        b[j][i] = ok;
    }
}

int solve() {
    int r = 0;
    vector<pii> vert_seg;
    int l1 = 0, r1 = -1;
    int l2 = 0, r2 = -1;
    while (1) {
        if (l1 == n && l2 == n) break;
        if (r1 < r2) {
            l1=r1+1;
            while (l1 < n && b[0][l1] == 0) ++l1;
            r1 = l1;
            while (r1 < n && b[0][r1] == 1) ++r1;
            if (l1 != n) --r1;
        } else {
            l2=r2+1;
            while (l2 < n && b[1][l2] == 0) ++l2;
            r2 = l2;
            while (r2 < n && b[1][r2] == 1) ++r2;
            if (l2 != n) --r2;
        }
        cout << l1 << " " << r1 << endl;
        cout << l2 << " " << r2 << endl;
        if (r1 == n && r2 == n) break;
        if (r1 == n) r ^= (r2-l2+1)^2;
        if (r2 == n) r ^= (r1-l1+1)^2;
        if (min(r1, r2) >= max(l1, l2) - 1) {
            r ^= go1(r1, r2, l1, l2);
        }
    }
    return r;
}

class PathGame {
public:
	string judge(vector <string> board) {
        forn(i, maxn) forn(j, 3) forn(k, 3) d[i][j][k] = -1;
		n = board[0].size();
        forn(i, 2) forn(j, n) a[i][j] = board[i][j] == '#';

        fill_bad();
        if (solve()) {
            return "Snuke";
        } else {
            return "Sothe";
        }
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	PathGame *obj;
	string answer;
	obj = new PathGame();
	clock_t startTime = clock();
	answer = obj->judge(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	string p1;
	
	{
	// ----- test 2 -----
	string t0[] = {".....","..#.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Sothe";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
    return 0;

	{
	// ----- test 0 -----
	string t0[] = {"#..","..."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Snuke";
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"#","."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Sothe";
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {".....","..#.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Sothe";
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {".#...","....."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Snuke";
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {".....#..#........##.......","..........#..........#...."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = "Snuke";
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
